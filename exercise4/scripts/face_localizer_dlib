#!/usr/bin/python3

import sys
import rospy
import dlib
import os
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
#import matplotlib.pyplot as plt
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA


class face_localizer:
    def __init__(self):
        rospy.init_node('face_localizer', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # The function for performin HOG face detection
        #self.face_detector = dlib.get_frontal_face_detector()
        #! TODO: change path, so it will be independet to the user
        self.face_net = cv2.dnn.readNetFromCaffe(os.path.dirname(os.path.abspath(__file__))+'/deploy.prototxt.txt', os.path.dirname(os.path.abspath(__file__))+'/res10_300x300_ssd_iter_140000.caffemodel')
        print("facenet")
        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for showing markers in Rviz
        self.marker_array = MarkerArray()
        self.marker_num = 1

        # Subscribe to the image and/or depth topic
        # self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)
        # self.depth_sub = rospy.Subscriber("/camera/depth/image_raw", Image, self.depth_callback)

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('face_markers', MarkerArray, queue_size=1000)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)
        
        #notri hranimo "priblizen center slike" pod katerim je mnzoica 100 ter normala stene na kateri je
        self.detected_pos_fin = {}

    def get_wall_norm(self):
        pass

    def get_pose_point(self,x,y,z,stamp):
        # Calculate the position of the detected face

        k_f = 554 # kinect focal length in pixels

        angle_to_target = np.arctan2(x,k_f)

        # Get the angles in the base_link relative coordinate system
        x, y = z*np.cos(angle_to_target), z*np.sin(angle_to_target)

        ### Define a stamped message for transformation - directly in "base_link"
        #point_s = PointStamped()
        #point_s.point.x = x
        #point_s.point.y = y
        #point_s.point.z = 0.3
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = rospy.Time(0)

        # Define a stamped message for transformation - in the "camera rgb frame"
        point_s = PointStamped()
        point_s.point.x = -y
        point_s.point.y = 0
        point_s.point.z = x
        point_s.header.frame_id = "camera_rgb_optical_frame"
        point_s.header.stamp = stamp

        # Get the point in the "map" coordinate system
        try:
            point_world = self.tf_buf.transform(point_s, "map")

            # Create a Pose object with the same position
            """pose = Pose()
            pose.position.x = point_world.point.x
            pose.position.y = point_world.point.y
            pose.position.z = point_world.point.z
            """
            pose = np.array([point_world.point.x,point_world.point.y,point_world.point.z])
        except Exception as e:
            print(e)
            pose = None

        return pose

    def get_pose(self,coords,dist,stamp):
        # Calculate the position of the detected face

        k_f = 554 # kinect focal length in pixels

        x1, x2, y1, y2 = coords

        face_x = self.dims[1] / 2 - (x1+x2)/2.
        face_y = self.dims[0] / 2 - (y1+y2)/2.

        angle_to_target = np.arctan2(face_x,k_f)

        # Get the angles in the base_link relative coordinate system
        x, y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)

        ### Define a stamped message for transformation - directly in "base_link"
        #point_s = PointStamped()
        #point_s.point.x = x
        #point_s.point.y = y
        #point_s.point.z = 0.3
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = rospy.Time(0)

        # Define a stamped message for transformation - in the "camera rgb frame"
        point_s = PointStamped()
        point_s.point.x = -y
        point_s.point.y = 0
        point_s.point.z = x
        point_s.header.frame_id = "camera_rgb_optical_frame"
        point_s.header.stamp = stamp

        # Get the point in the "map" coordinate system
        try:
            point_world = self.tf_buf.transform(point_s, "map")

            # Create a Pose object with the same position
            pose = Pose()
            pose.position.x = point_world.point.x
            pose.position.y = point_world.point.y
            pose.position.z = point_world.point.z
        except Exception as e:
            print(e)
            pose = None

        return pose
    
    def get_normal(self, image,stamp):
        x1=y1=x2=y3 = 0
        x3=y2 = min(image.shape)-1
        for i in range( min(image.shape)):
            if(np.isnan(image[y1,x1])):
                y1=x1 = i
            if(np.isnan(image[y2,x2])):
                y2 = min(image.shape)-1-i
                x2 = i
            if(np.isnan(image[y3,x3])):
                x3 = min(image.shape)-1-i
                y3 = 0
        v1 = np.array([x1,y1,image[x1,y1]])
        v1_cor = self.get_pose((x1,x1,y1,y1),image[x1,y1],stamp)
        v2 = np.array([x2,y2,image[x2,y2]])
        v2_cor = self.get_pose((x2,x2,y2,y2),image[x2,y2],stamp)
        v3 = np.array([x3,y3,image[x3,y3]])
        v3_cor = self.get_pose((x3,x3,y3,y3),image[x3,y3],stamp)
        
        try: 
            #print(v1_cor,v2_cor,v3_cor)
            for pose in [v1_cor,v2_cor,v3_cor]:
                if pose is not None:

                    # Create a marker used for visualization
                    self.marker_num += 1
                    marker = Marker()
                    marker.header.stamp = rospy.Time(0)
                    marker.header.frame_id = 'map'
                    marker.pose = pose
                    marker.type = Marker.CUBE
                    marker.action = Marker.ADD
                    marker.frame_locked = False
                    marker.lifetime = rospy.Duration.from_sec(10)
                    marker.id = self.marker_num
                    marker.scale = Vector3(0.1, 0.1, 0.1)
                    marker.color = ColorRGBA(0, 1, 0, 1)
                    self.marker_array.markers.append(marker)

                    self.markers_pub.publish(self.marker_array)
            rospy.sleep(2)
            v1 = np.array([v1_cor.position.x,v1_cor.position.y, v1_cor.position.z] )
            v2 = np.array([v2_cor.position.x,v2_cor.position.y, v2_cor.position.z] )
            v3 = np.array([v3_cor.position.x,v3_cor.position.y, v3_cor.position.z] )
            v12 =v2-v1
            v13 =v3-v1
            norm = np.cross(v12,v13)
        except Exception as e:
            print(e)
            norm = None
        """try:
            v1_p = PointStamped()
            v1_p.point.x = v1_p[0]
            v1_p.point.y = v1_p[1]
            v1_p.point.z = v1_p[2]
            v1_p.header.frame_id = "camera_rgb_optical_frame"
            v1_p.header.stamp = stamp
            v2_p = PointStamped()
            v2_p.point.x = v2_p[0]
            v2_p.point.y = v2_p[1]
            v2_p.point.z = v2_p[2]
            v2_p.header.frame_id = "camera_rgb_optical_frame"
            v2_p.header.stamp = stamp
            v3_p = PointStamped()
            v3_p.point.x = v3_p[0]
            v3_p.point.y = v3_p[1]
            v3_p.point.z = v3_p[2]
            v3_p.header.frame_id = "camera_rgb_optical_frame"
            v3_p.header.stamp = stamp
            v1 = self.tf_buf.transform(v1, "map")
            v2 = self.tf_buf.transform(v2, "map")
            v3 = self.tf_buf.transform(v3, "map")
            v12 =v2_p-v1_p
            v13 =v3_p-v1_p
            norm = np.cross(v12,v13)
            norm_world = self.tf_buf.transform(norm_p, "map")

            norm[0] = norm_world.point.x
            norm[1] = norm_world.point.y
            norm[2] = norm_world.point.z
            
        except Exception as e:
            print(e)
            norm = None
        """
        return norm

    def find_faces(self):
        print('I got a new image!')

        # Get the next rgb and depth images that are posted from the camera
        try:
            rgb_image_message = rospy.wait_for_message("/camera/rgb/image_raw", Image)
        except Exception as e:
            print(e)
            return 0

        try:
            depth_image_message = rospy.wait_for_message("/camera/depth/image_raw", Image)
        except Exception as e:
            print(e)
            return 0

        # Convert the images into a OpenCV (numpy) format

        try:
            rgb_image = self.bridge.imgmsg_to_cv2(rgb_image_message, "bgr8")
        except CvBridgeError as e:
            print(e)

        try:
            depth_image = self.bridge.imgmsg_to_cv2(depth_image_message, "32FC1")
        except CvBridgeError as e:
            print(e)
        
        # Set the dimensions of the image
        self.dims = rgb_image.shape
        h = self.dims[0]
        w = self.dims[1]


        # split image into 3 different images that are 1:1 format
        # it is assumed that image is in format that the images' width is larger than height
        if self.dims[0] < self.dims[1]:
            num_of_dead_pixels = self.dims[1]-self.dims[0] # 160
            shift_pixels = num_of_dead_pixels//2 # 80
            rgb_image_left = rgb_image[:,0:self.dims[0],:] # 480x480
            rgb_image_middle = rgb_image[:,shift_pixels:(shift_pixels+self.dims[0]),:] # 480x480
            rgb_image_right = rgb_image[:,(self.dims[1]-self.dims[0]):,:] # 480x480
        else:
            print("\n\nSpodnja stranica bi morala biti daljša !!!!\n\n")

        # h_custom and w_custom for custom sizes for multiplication
        dims_custom = (0,0,0)
        dims_custom = rgb_image_left.shape
        h_custom = dims_custom[0]
        w_custom = dims_custom[1]


        imgL = cv2.resize(src=rgb_image_left, dsize=(300, 300))
        imgM = cv2.resize(src=rgb_image_middle, dsize=(300, 300))
        imgR = cv2.resize(src=rgb_image_right, dsize=(300, 300))



        # Tranform image to gayscale
        #gray = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2GRAY)

        # Do histogram equlization
        #img = cv2.equalizeHist(gray)

        # Detect the faces in the image
        #face_rectangles = self.face_detector(rgb_image, 0)
        blob = cv2.dnn.blobFromImages(images=[imgL,imgM,imgR], scalefactor=1.0, size=(300, 300), mean=(104.0, 177.0, 123.0))
        self.face_net.setInput(blob)
        face_detections = self.face_net.forward()
        
        right_image_shift = rgb_image.shape[1] - rgb_image.shape[0]
        
        for i in range(0, face_detections.shape[2]):
            imageIndx = face_detections[0,0,i,0] # 0 == left, 1 == middle, 2 == right
            confidence = face_detections[0, 0, i, 2]
            if confidence>0.5:
                box = face_detections[0,0,i,3:7] * np.array([w_custom,h_custom,w_custom,h_custom])
                box = box.astype('int')
                x1_custom, y1_custom, x2_custom, y2_custom = box[0], box[1], box[2], box[3]
                
                # y stay the same because original images' width is larger than its width
                if imageIndx == 0: # left
                    x1 = x1_custom
                    y1 = y1_custom
                    x2 = x2_custom
                    y2 = y2_custom
                elif imageIndx == 1: # middle
                    x1 = shift_pixels + x1_custom
                    y1 = y1_custom
                    x2 = shift_pixels + x2_custom
                    y2 = y2_custom
                elif imageIndx == 2: # right
                    x1 = right_image_shift + x1_custom
                    y1 = y1_custom
                    x2 = right_image_shift + x2_custom
                    y2 = y2_custom

                # Extract region containing face
                face_region = rgb_image[y1:y2, x1:x2]

                # Visualize the extracted face
                #cv2.imshow("ImWindow", face_region)
                #cv2.waitKey(1)

                # Find the distance to the detected face
                face_distance = float(np.nanmean(depth_image[y1:y2,x1:x2]))
                im = depth_image[y1:y2,x1:x2]
                norm = self.get_normal(im,depth_image_message.header.stamp)
                print('Norm of face', norm)

                print('Distance to face', face_distance)
                #trans = tf2_ros.Buffer().lookup_transform('mapa', 'base_link', rospy.Time(0))
                #print('my position ',trans)
                # Get the time that the depth image was recieved
                depth_time = depth_image_message.header.stamp

                # Find the location of the detected face
                pose = self.get_pose((x1,x2,y1,y2), face_distance, depth_time)


                if pose is not None:

                    # Create a marker used for visualization
                    self.marker_num += 1
                    marker = Marker()
                    marker.header.stamp = rospy.Time(0)
                    marker.header.frame_id = 'map'
                    marker.pose = pose
                    marker.type = Marker.CUBE
                    marker.action = Marker.ADD
                    marker.frame_locked = False
                    marker.lifetime = rospy.Duration.from_sec(10)
                    marker.id = self.marker_num
                    marker.scale = Vector3(0.1, 0.1, 0.1)
                    marker.color = ColorRGBA(0, 1, 0, 1)
                    self.marker_array.markers.append(marker)

                    self.markers_pub.publish(self.marker_array)

    def depth_callback(self,data):

        try:
            depth_image = self.bridge.imgmsg_to_cv2(data, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Do the necessairy conversion so we can visuzalize it in OpenCV
        
        image_1 = depth_image / np.nanmax(depth_image)
        image_1 = image_1*255
        
        image_viz = np.array(image_1, dtype=np.uint8)

        #cv2.imshow("Depth window", image_viz)
        #cv2.waitKey(1)

        #plt.imshow(depth_image)
        #plt.show()

def main():

        face_finder = face_localizer()

        rate = rospy.Rate(1)
        while not rospy.is_shutdown():
            print("hello!")
            face_finder.find_faces()
            print("hello")
            rate.sleep()

        cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
